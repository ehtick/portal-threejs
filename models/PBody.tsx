/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 /Users/thomasmatlock/Documents/Github/portal/public/models/meshes/PBody/PBody.gltf --output /Users/thomasmatlock/Documents/Github/portal/models/PBody.tsx -r /models/meshes/PBody -t --resolution 512 --shadows --meta --keepmeshes --keepmaterials 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib';
import { useFrame, useThree } from "@react-three/fiber";
import { useScroll, Detailed } from '@react-three/drei';
import { easing, geometry } from 'maath';
import UserContextProvider from '@/context/userContext';
import InputContextProvider from '@/context/inputContext';
import { useContext, useState } from 'react';
import pointerEventHandlers from './shared/pointerEventHandlers';

        

type GLTFResult = GLTF & {
  nodes: {
    eggbot_lod0001: THREE.Mesh
    eggbot_lod0001_1: THREE.Mesh
    eggbot_lod0001_2: THREE.Mesh
    eggbot_lod0001_3: THREE.Mesh
    eggbot_lod0001_4: THREE.Mesh
  }
  materials: {
    eggbot_frame: THREE.MeshStandardMaterial
    eggbot_shell: THREE.MeshStandardMaterial
    eye_emissive: THREE.MeshStandardMaterial
    iris: THREE.MeshStandardMaterial
    bot_eye_ring_lights: THREE.MeshStandardMaterial
  }
}

// type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Model(props: {scrollable?: boolean, distances?: number[]} & JSX.IntrinsicElements['group']) {
  
    const { frameloop, dev, mobile } = useContext(UserContextProvider);
    const { timestamp, scrollSpeed, scrollDirection, scrolling, activeObject, clipDuration, setClipDuration } = useContext(InputContextProvider);
    const { scrollable } = props.scrollable ? props : { scrollable: false };
    const scroll = useScroll();
    const { clock, controls, camera, scene } = useThree();
    const { nodes, materials } = useGLTF('/../../models/meshes/PBody/PBody.gltf') as GLTFResult
  return (
    <group {...props} dispose={null}>
            

            <Detailed distances={props.distances || [0, 4, 8, 12]} >
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 /Users/thomasmatlock/Documents/Github/portal/public/models/meshes/PBody/PBody.gltf --output /Users/thomasmatlock/Documents/Github/portal/models/PBody.tsx -r /models/meshes/PBody -t --resolution 512 --shadows --meta --keepmeshes --keepmaterials 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib';
import { useFrame, useThree } from "@react-three/fiber";
import { useScroll, Detailed } from '@react-three/drei';
import { easing, geometry } from 'maath';
import UserContextProvider from '@/context/userContext';
import InputContextProvider from '@/context/inputContext';
import { useContext, useState } from 'react';
import pointerEventHandlers from './shared/pointerEventHandlers';

        

type GLTFResult = GLTF & {
  nodes: {
    eggbot_lod0001: THREE.Mesh
    eggbot_lod0001_1: THREE.Mesh
    eggbot_lod0001_2: THREE.Mesh
    eggbot_lod0001_3: THREE.Mesh
    eggbot_lod0001_4: THREE.Mesh
  }
  materials: {
    eggbot_frame: THREE.MeshStandardMaterial
    eggbot_shell: THREE.MeshStandardMaterial
    eye_emissive: THREE.MeshStandardMaterial
    iris: THREE.MeshStandardMaterial
    bot_eye_ring_lights: THREE.MeshStandardMaterial
  }
}

// type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Model(props: {scrollable?: boolean, distances?: number[]} & JSX.IntrinsicElements['group']) {
  
    const { frameloop, dev, mobile } = useContext(UserContextProvider);
    const { timestamp, scrollSpeed, scrollDirection, scrolling, activeObject, clipDuration, setClipDuration } = useContext(InputContextProvider);
    const { scrollable } = props.scrollable ? props : { scrollable: false };
    const scroll = useScroll();
    const { clock, controls, camera, scene } = useThree();
    const { nodes, materials } = useGLTF('/../../models/meshes/PBody/PBody.gltf') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group userData={{ name: 'PBody' }}>
        <group userData={{ name: 'PBody_Model' }}>
          <mesh castShadow receiveShadow geometry={nodes.eggbot_lod0001.geometry} material={materials.eggbot_frame} 
                onClick={pointerEventHandlers.handleClick}
                onContextMenu={pointerEventHandlers.handleContextMenu}
                onDoubleClick={pointerEventHandlers.handleDoubleClick}
                onWheel={pointerEventHandlers.handleWheel}
                onPointerUp={pointerEventHandlers.handlePointerUp}
                onPointerDown={pointerEventHandlers.handlePointerDown}
                onPointerOver={pointerEventHandlers.handlePointerOver}
                onPointerOut={pointerEventHandlers.handlePointerOut}
                onPointerEnter={pointerEventHandlers.handlePointerEnter}
                onPointerLeave={pointerEventHandlers.handlePointerLeave}
                onPointerMove={pointerEventHandlers.handlePointerMove}
                onPointerMissed={pointerEventHandlers.handlePointerMissed}
                onUpdate={pointerEventHandlers.handleUpdate} />
          <mesh castShadow receiveShadow geometry={nodes.eggbot_lod0001_1.geometry} material={materials.eggbot_shell} 
                onClick={pointerEventHandlers.handleClick}
                onContextMenu={pointerEventHandlers.handleContextMenu}
                onDoubleClick={pointerEventHandlers.handleDoubleClick}
                onWheel={pointerEventHandlers.handleWheel}
                onPointerUp={pointerEventHandlers.handlePointerUp}
                onPointerDown={pointerEventHandlers.handlePointerDown}
                onPointerOver={pointerEventHandlers.handlePointerOver}
                onPointerOut={pointerEventHandlers.handlePointerOut}
                onPointerEnter={pointerEventHandlers.handlePointerEnter}
                onPointerLeave={pointerEventHandlers.handlePointerLeave}
                onPointerMove={pointerEventHandlers.handlePointerMove}
                onPointerMissed={pointerEventHandlers.handlePointerMissed}
                onUpdate={pointerEventHandlers.handleUpdate} />
          <mesh castShadow receiveShadow geometry={nodes.eggbot_lod0001_2.geometry} material={materials.eye_emissive} 
                onClick={pointerEventHandlers.handleClick}
                onContextMenu={pointerEventHandlers.handleContextMenu}
                onDoubleClick={pointerEventHandlers.handleDoubleClick}
                onWheel={pointerEventHandlers.handleWheel}
                onPointerUp={pointerEventHandlers.handlePointerUp}
                onPointerDown={pointerEventHandlers.handlePointerDown}
                onPointerOver={pointerEventHandlers.handlePointerOver}
                onPointerOut={pointerEventHandlers.handlePointerOut}
                onPointerEnter={pointerEventHandlers.handlePointerEnter}
                onPointerLeave={pointerEventHandlers.handlePointerLeave}
                onPointerMove={pointerEventHandlers.handlePointerMove}
                onPointerMissed={pointerEventHandlers.handlePointerMissed}
                onUpdate={pointerEventHandlers.handleUpdate} />
          <mesh castShadow receiveShadow geometry={nodes.eggbot_lod0001_3.geometry} material={materials.iris} 
                onClick={pointerEventHandlers.handleClick}
                onContextMenu={pointerEventHandlers.handleContextMenu}
                onDoubleClick={pointerEventHandlers.handleDoubleClick}
                onWheel={pointerEventHandlers.handleWheel}
                onPointerUp={pointerEventHandlers.handlePointerUp}
                onPointerDown={pointerEventHandlers.handlePointerDown}
                onPointerOver={pointerEventHandlers.handlePointerOver}
                onPointerOut={pointerEventHandlers.handlePointerOut}
                onPointerEnter={pointerEventHandlers.handlePointerEnter}
                onPointerLeave={pointerEventHandlers.handlePointerLeave}
                onPointerMove={pointerEventHandlers.handlePointerMove}
                onPointerMissed={pointerEventHandlers.handlePointerMissed}
                onUpdate={pointerEventHandlers.handleUpdate} />
          <mesh castShadow receiveShadow geometry={nodes.eggbot_lod0001_4.geometry} material={materials.bot_eye_ring_lights} 
                onClick={pointerEventHandlers.handleClick}
                onContextMenu={pointerEventHandlers.handleContextMenu}
                onDoubleClick={pointerEventHandlers.handleDoubleClick}
                onWheel={pointerEventHandlers.handleWheel}
                onPointerUp={pointerEventHandlers.handlePointerUp}
                onPointerDown={pointerEventHandlers.handlePointerDown}
                onPointerOver={pointerEventHandlers.handlePointerOver}
                onPointerOut={pointerEventHandlers.handlePointerOut}
                onPointerEnter={pointerEventHandlers.handlePointerEnter}
                onPointerLeave={pointerEventHandlers.handlePointerLeave}
                onPointerMove={pointerEventHandlers.handlePointerMove}
                onPointerMissed={pointerEventHandlers.handlePointerMissed}
                onUpdate={pointerEventHandlers.handleUpdate} />
        </group>
      </group>
    
            </Detailed>
</group>
  )
}

useGLTF.preload('/../../models/meshes/PBody/PBody.gltf')
