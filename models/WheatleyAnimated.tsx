/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 /Users/thomasmatlock/Documents/Github/portal/public/models/meshes/WheatleyAnimated/WheatleyAnimated.gltf --output /Users/thomasmatlock/Documents/Github/portal/models/WheatleyAnimated.tsx -r /models/meshes/WheatleyAnimated -t --resolution 512 --shadows --meta --keepmeshes --keepmaterials 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib';
import { useFrame, useThree } from "@react-three/fiber";
import { useScroll, Detailed } from '@react-three/drei';
import { easing, geometry } from 'maath';
import UserContextProvider from '@/context/userContext';
import InputContextProvider from '@/context/inputContext';
import { useContext, useState } from 'react';
import pointerEventHandlers from './shared/pointerEventHandlers';

        

type GLTFResult = GLTF & {
  nodes: {
    personality_sphere_model: THREE.SkinnedMesh
    personality_sphere_model_1: THREE.SkinnedMesh
    Root: THREE.Bone
  }
  materials: {
    personality_sphere: THREE.MeshStandardMaterial
    personality_sphere_light: THREE.MeshStandardMaterial
  }
}

// type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

export function Model(props: {scrollable?: boolean, distances?: number[]} & JSX.IntrinsicElements['group']) {
  
    const { frameloop, dev, mobile } = useContext(UserContextProvider);
    const { timestamp, scrollSpeed, scrollDirection, scrolling, activeObject, clipDuration, setClipDuration } = useContext(InputContextProvider);
    const { scrollable } = props.scrollable ? props : { scrollable: false };
    const scroll = useScroll();
    const { clock, controls, camera, scene } = useThree();
    const { nodes, materials } = useGLTF('/../../models/meshes/WheatleyAnimated/WheatleyAnimated.gltf') as GLTFResult
  return (
    <group {...props} dispose={null}>
            

            <Detailed distances={props.distances || [0, 4, 8, 12]} >
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 /Users/thomasmatlock/Documents/Github/portal/public/models/meshes/WheatleyAnimated/WheatleyAnimated.gltf --output /Users/thomasmatlock/Documents/Github/portal/models/WheatleyAnimated.tsx -r /models/meshes/WheatleyAnimated -t --resolution 512 --shadows --meta --keepmeshes --keepmaterials 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib';
import { useFrame, useThree } from "@react-three/fiber";
import { useScroll, Detailed } from '@react-three/drei';
import { easing, geometry } from 'maath';
import UserContextProvider from '@/context/userContext';
import InputContextProvider from '@/context/inputContext';
import { useContext, useState } from 'react';
import pointerEventHandlers from './shared/pointerEventHandlers';

        

type GLTFResult = GLTF & {
  nodes: {
    personality_sphere_model: THREE.SkinnedMesh
    personality_sphere_model_1: THREE.SkinnedMesh
    Root: THREE.Bone
  }
  materials: {
    personality_sphere: THREE.MeshStandardMaterial
    personality_sphere_light: THREE.MeshStandardMaterial
  }
}

// type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

export function Model(props: {scrollable?: boolean, distances?: number[]} & JSX.IntrinsicElements['group']) {
  
    const { frameloop, dev, mobile } = useContext(UserContextProvider);
    const { timestamp, scrollSpeed, scrollDirection, scrolling, activeObject, clipDuration, setClipDuration } = useContext(InputContextProvider);
    const { scrollable } = props.scrollable ? props : { scrollable: false };
    const scroll = useScroll();
    const { clock, controls, camera, scene } = useThree();
    const { nodes, materials } = useGLTF('/../../models/meshes/WheatleyAnimated/WheatleyAnimated.gltf') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group position={[0, 27.002, 0]} userData={{ name: 'personality_sphere' }}>
        <primitive object={nodes.Root} />
        <group userData={{ name: 'Personality_Sphere_model' }}>
          <skinnedMesh geometry={nodes.personality_sphere_model.geometry} material={materials.personality_sphere} skeleton={nodes.personality_sphere_model.skeleton} />
          <skinnedMesh geometry={nodes.personality_sphere_model_1.geometry} material={materials.personality_sphere_light} skeleton={nodes.personality_sphere_model_1.skeleton} />
        </group>
      </group>
    
            </Detailed>
</group>
  )
}

useGLTF.preload('/../../models/meshes/WheatleyAnimated/WheatleyAnimated.gltf')
