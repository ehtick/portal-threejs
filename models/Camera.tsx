/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 /Users/nikkirincon/Documents/GitHub/juxtaposition-web/Camera.glb --output /Users/nikkirincon/Documents/GitHub/juxtaposition-web/models/Camera.tsx -r /models --transform -t --resolution 512 --shadows --meta --keepmeshes --keepmaterials 
Files: /Users/nikkirincon/Documents/GitHub/juxtaposition-web/Camera.glb [20.51KB] > Camera-transformed.glb [9.1KB] (56%)
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, PerspectiveCamera, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib';
import { useFrame, useThree } from "@react-three/fiber";
import { useScroll } from '@react-three/drei';
import { easing, geometry } from 'maath';
import UserContextProvider from '@/context/userContext';
import InputContextProvider from '@/context/inputContext';
import { useContext } from 'react';
        

type GLTFResult = GLTF & {
  nodes: {}
  materials: {}
}

type ActionName = 'CameraAction.001'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

// type ContextType = Record<string, React.ForwardRefExoticComponent<>>

interface GLTFAction extends THREE.AnimationClip {
    name: ActionName;
}
export function Model(props: {scrollable?: boolean} & JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  
    const { frameloop, dev, mobile } = useContext(UserContextProvider);
    const { timestamp, scrollSpeed, scrollDirection, scrolling, activeObject, clipDuration, setClipDuration } = useContext(InputContextProvider);
    const { scrollable } = props.scrollable ? props : { scrollable: false };
    const scroll = useScroll();
    const { clock, controls, camera, scene } = useThree();
    const { nodes, materials, animations } = useGLTF('/../../models/Camera-transformed.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)
  useFrame((state) => {
        const clock = state.clock;
        const controls = state.controls;
        const camera = state.camera;
        const scene = state.scene;
        const elapsedTime = clock.getElapsedTime();
        if (actions['CameraAction.001'].getClip().duration > clipDuration)
                setClipDuration(actions['CameraAction.001'].getClip().duration);
        
            if(scrollable){
                actions['CameraAction.001'].time = scroll.offset * clipDuration
                if(scrolling.current){
                    actions['CameraAction.001'].play()
                }else{
                    actions['CameraAction.001'].play().paused = true
                }
            }
            if(!scrollable){
                actions['CameraAction.001'].play();
                actions['CameraAction.001'].time = elapsedTime % clipDuration;
                actions['CameraAction.001'].setLoop(THREE.LoopRepeat, Infinity);
            }
        
    }); return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <PerspectiveCamera name="Camera" makeDefault={true} 
                    zoom = { mobile ? 1 : 1.25 } far={40} near={0.001} fov={39.598} position={[22.447, 0.5, 12.949]} rotation={[0.094, 1.501, -0.094]} userData={{ name: 'Camera' }} />
      </group>
    </group>
  )
}

useGLTF.preload('/../../models/Camera-transformed.glb')
