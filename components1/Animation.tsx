/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/animation.glb -t 
*/

import * as THREE from 'three';
import React, { useRef, useEffect } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
	nodes: {
		Cylinder: THREE.Mesh;
	};
	materials: {
		['Material.001']: THREE.MeshStandardMaterial;
	};
	animations: GLTFAction[];
};

type ActionName = 'CylinderAction';
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>;
interface GLTFAction extends THREE.AnimationClip {
	name: ActionName;
}
export function Model(props: JSX.IntrinsicElements['group']) {
	const group = useRef<THREE.Group>();
	const { nodes, materials, animations } = useGLTF('/models/src/animation.glb') as GLTFResult;
	const { actions } = useAnimations(animations, group);
	useEffect(() => void (actions['CylinderAction'].play().paused = true), [actions]);
	useFrame((state, delta) => {
		actions['CylinderAction'].time = state.clock.getElapsedTime() * 1;
		actions['CylinderAction'].play();
		actions['CylinderAction'].play().paused = false;
	});
	return (
		<group ref={group} {...props} dispose={null}>
			<group name="Scene">
				<mesh
					name="Cylinder"
					geometry={nodes.Cylinder.geometry}
					material={materials['Material.001']}
				/>
			</group>
		</group>
	);
}

useGLTF.preload('/models/src/animation.glb');
